#!/usr/bin/env python

from __future__ import print_function
import os
import sys
import serial
import rospy
import numpy as np
from serial import SerialException
from geometry_msgs.msg import Vector3
from imu_wrapper.srv import GetAcceleration, GetAccelerationResponse

dev = '/dev/ttyUSB0'
baud = 9600
bias = 2**15

class ImuSerial:

    def __init__(self):

        self.dev = dev
        self.baud = baud
        self.bias = bias
        try:
            self.ser = serial.Serial(
                port=self.dev, 
                baudrate=self.baud, 
                bytesize=serial.EIGHTBITS,
                timeout=0.03,
                write_timeout=0.03
            )
            print("Initialized IMU serial")
        except (SerialException, ValueError) as e:
            print("Failed to initialize ImuSerial (%s %d)" % (self.dev, self.baud), file=sys.stderr)
            raise e


    def close(self):
        
        self.ser.close()


    def interpretAccData(self, acc_data):

        ax = np.int16(256*ord(acc_data[0]) + ord(acc_data[1]))
        ay = np.int16(256*ord(acc_data[2]) + ord(acc_data[3]))
        az = np.int16(256*ord(acc_data[4]) + ord(acc_data[5]))
        print("Ax_raw: %d" % ax)
        ax /= 8192.0
        ay /= 8192.0
        az /= 8192.0
        return ax, ay, az


    def readAcc(self):

        ax = 0.
        ay = 0.
        az = 0.
        # Read 6 bytes from the accelerometer
        self.ser.write(1)
        acc_data = self.ser.read(6)
        len_data = len(acc_data)
        # Check if 6 bytes were received; if not, skip
        if len_data == 6:
            ax, ay, az = self.interpretAccData(acc_data)
        elif len_data == 0:
            print("IMU read timeout", file=sys.stderr)
        else:
            print("Got only %d bytes from IMU" % len_data, file=sys.stderr)
        return ax, ay, az

            
def _get_acc(req):
    ax, ay, az = imu.readAcc()
    return GetAccelerationResponse(Vector3(ax,ay,az))


if __name__ == '__main__':

    try:
        imu = ImuSerial()
    except SerialException, ValueError:
        print("Failed to start IMU serial node")
        sys.exit()

    rospy.init_node('imu_wrapper', anonymous=True)
    rospy.Service('get_acceleration', GetAcceleration, _get_acc)

    rospy.spin()
    
    print("Closing IMU wrapper")
    imu.close()

