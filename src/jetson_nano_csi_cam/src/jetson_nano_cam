#!/usr/bin/env python

import os
import sys
import rospy
import rospkg
import cv2
import numpy as np
from sensor_msgs.msg import Image
from geometry_msgs.msg import Point
from cv_bridge import CvBridge, CvBridgeError

def gstreamer_pipeline(capture_width=640, capture_height=480,
        display_width=640, display_height=480, framerate=30, flip_method=0):

    return (
        "nvarguscamerasrc ! "
        "video/x-raw(memory:NVMM), "
        "width=(int)%d, height=(int)%d, "
        "format=(string)NV12, framerate=(fraction)%d/1 ! "
        "nvvidconv flip-method=%d ! "
        "video/x-raw, width=(int)%d, height=(int)%d, format=(string)BGRx ! "
        "videoconvert ! "
        "video/x-raw, format=(string)BGR ! appsink"
        % (
            capture_width,
            capture_height,
            framerate,
            flip_method,
            display_width,
            display_height,
        )
    )


class NanoCam:

    def __init__(self, rate):

        self.rate = rate
        self.init_camera()
        self.bridge = CvBridge()
        rospy.init_node('camera', anonymous=True)
        self.pub_cam  = rospy.Publisher("/camera/image_raw", Image, queue_size = 1)

    def init_camera(self):

        print(gstreamer_pipeline(flip_method=0))
        self.cap = cv2.VideoCapture(gstreamer_pipeline(flip_method=0), cv2.CAP_GSTREAMER)
        if self.cap.isOpened():
            print("Successfully opened camera")
        else:
            print("Problem while opening camera")
        

    def run(self):
        
        rate = rospy.Rate(self.rate)
        while not rospy.is_shutdown():
            # Read frame
            ret, img = self.cap.read()
            # Publish
            try:
                self.pub_cam.publish(self.bridge.cv2_to_imgmsg(img, "bgr8"))
            except CvBridgeError as e:
                print(e)
            #rate.sleep()

        self.cap.release()

if __name__ == '__main__':

    cam = NanoCam(30)
    cam.run()
